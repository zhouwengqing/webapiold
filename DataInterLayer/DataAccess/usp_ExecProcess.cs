//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 2.0.50727
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DDYZ.Ensis.DataSource.DataAccess
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Data.SqlTypes;
    using System.Xml;
    using System.Reflection;
    using DDYZ.Ensis.Library.Exception.DataBase;


    public class usp_ExecProcess : BaseProcedure
    {
        private bool bExcuteLongTime = true;

        public usp_ExecProcess(string sProcedureName, List<SqlParameter> arrParameters)
        {
            base.InitCommand(sProcedureName);
            if (arrParameters != null)
            {
                for (int i = 0; i < arrParameters.Count; i++)
                {
                    base.m_cmd.Parameters.Add(arrParameters[i]);
                }
            }
        }

        public usp_ExecProcess(string sProcedureName, List<SqlParameter> arrParameters, bool _bExcuteLongTime)
            : this(sProcedureName, arrParameters)
        {
            this.bExcuteLongTime = _bExcuteLongTime;
        }

        /// <summary>
        /// 执行存储过程
        /// </summary>
        /// <returns> 受影响的行数</returns>
        public new int ExecNoQuery()
        {
            if (this.bExcuteLongTime)
            {
                using (SqlConnection conn = new SqlConnection(DataAccessConfig.ConnStringLong.Replace("[timeout]",
                    Convert.ToString(24 * 3600))))
                {
                    int iResult = 0;
                    try
                    {
                        conn.Open();
                        this.m_cmd.Connection = conn;
                        this.m_cmd.CommandTimeout = 0;
                        iResult = this.m_cmd.ExecuteNonQuery();
                    }

                    catch (InvalidOperationException e)
                    {
                        throw new DBOpenException(e.Message, "usp_ExecProcess", "ExecNoQuery()", this.m_cmd.Parameters.ToString());
                    }
                    catch (SqlException e)
                    {
                        if (e.Number == 2627)
                        {
                            throw new DBPKException(e.Message, "usp_ExecProcess", "ExecNoQuery()", this.m_cmd.Parameters.ToString());
                        }
                        else
                        {
                            throw new DBQueryException(e.Message, "usp_ExecProcess", "ExecNoQuery()", this.m_cmd.Parameters.ToString());
                        }
                    }
                    catch (System.Exception e)
                    {
                        throw new DBException(e.Message, "usp_ExecProcess", "ExecNoQuery()", this.m_cmd.Parameters.ToString());
                    }
                    return iResult;
                }
            }
            else
            {
                return base.ExecNoQuery();
            }
        }
    }
}
